# schedule.py
import pandas as pd
from datetime import datetime, timedelta

# –æ–∂–∏–¥–∞–µ–º—ã–µ –∏–º–µ–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫ (–≤–∞—Ä–∏–∞–Ω—Ç—ã)
EXPECTED = {
    "day": ["–¥–µ–Ω—å", "day"],
    "time": ["–≤—Ä–µ–º—è", "time"],
    "subject": ["–ø—Ä–µ–¥–º–µ—Ç", "subject", "–Ω–∞–∑–≤–∞–Ω–∏–µ"],
    "tag": ["—Ç–µ–≥", "tag", "—Ö—ç—à—Ç–µ–≥", "hashtag"],
    "room": ["–∞—É–¥–∏—Ç–æ—Ä–∏—è", "room", "–∫–∞–±–∏–Ω–µ—Ç"]
}

def find_column(cols, variants):
    for v in variants:
        for c in cols:
            if str(c).strip().lower() == v:
                return c
    # –ø–æ–ø—ã—Ç–∫–∞ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    for v in variants:
        for c in cols:
            if v in str(c).strip().lower():
                return c
    return None

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∞–±–ª–∏—Ü—ã —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
try:
    raw = pd.read_excel("–†–ê–°–ü–ò–°–ê–ù–ï–ò.xlsx")
except Exception as e:
    raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –†–ê–°–ü–ò–°–ê–ù–ï–ò.xlsx: {e}")

cols = list(raw.columns)
col_day = find_column(cols, EXPECTED["day"])
col_time = find_column(cols, EXPECTED["time"])
col_subject = find_column(cols, EXPECTED["subject"])
col_tag = find_column(cols, EXPECTED["tag"])
col_room = find_column(cols, EXPECTED["room"])

missing = [name for name, c in (("–î–µ–Ω—å", col_day), ("–í—Ä–µ–º—è", col_time),
                                ("–ü—Ä–µ–¥–º–µ—Ç", col_subject), ("–¢–µ–≥", col_tag),
                                ("–ê—É–¥–∏—Ç–æ—Ä–∏—è", col_room)) if c is None]
if missing:
    raise RuntimeError(f"–í —Ñ–∞–π–ª–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∫–æ–ª–æ–Ω–∫–∏: {missing}. –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {cols}")

# –ø–µ—Ä–µ–∏–º–µ–Ω—É–µ–º –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
SCHEDULE = raw.rename(columns={
    col_day: "–î–µ–Ω—å",
    col_time: "–í—Ä–µ–º—è",
    col_subject: "–ü—Ä–µ–¥–º–µ—Ç",
    col_tag: "–¢–µ–≥",
    col_room: "–ê—É–¥–∏—Ç–æ—Ä–∏—è"
}).copy()

# –æ—á–∏—Å—Ç–∫–∞ —Å—Ç—Ä–æ–∫
for c in ["–î–µ–Ω—å", "–í—Ä–µ–º—è", "–ü—Ä–µ–¥–º–µ—Ç", "–¢–µ–≥", "–ê—É–¥–∏—Ç–æ—Ä–∏—è"]:
    SCHEDULE[c] = SCHEDULE[c].astype(str).str.strip().replace({"nan": ""})

# –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –¥–Ω–µ–π
MAP_DAYS = {
    "monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "tuesday": "–í—Ç–æ—Ä–Ω–∏–∫", "wednesday": "–°—Ä–µ–¥–∞",
    "thursday": "–ß–µ—Ç–≤–µ—Ä–≥", "friday": "–ü—è—Ç–Ω–∏—Ü–∞", "saturday": "–°—É–±–±–æ—Ç–∞",
    "sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
    "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫": "–í—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥–∞": "–°—Ä–µ–¥–∞",
    "—á–µ—Ç–≤–µ—Ä–≥": "–ß–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü–∞": "–ü—è—Ç–Ω–∏—Ü–∞", "—Å—É–±–±–æ—Ç–∞": "–°—É–±–±–æ—Ç–∞",
    "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
}

def normalize_day_name(d):
    if not d: 
        return ""
    key = str(d).strip().lower()
    return MAP_DAYS.get(key, d.strip())

SCHEDULE["–î–µ–Ω—å"] = SCHEDULE["–î–µ–Ω—å"].apply(normalize_day_name)

# --- —Ñ—É–Ω–∫—Ü–∏–∏ API ---
def get_day_schedule(user_tags, day: str = None) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç-—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–µ–Ω—å (–∏–ª–∏ —Å–µ–≥–æ–¥–Ω—è)."""
    now = datetime.now()
    if day is None:
        day_name = normalize_day_name(now.strftime("%A"))
    else:
        day_name = normalize_day_name(day)

    df = SCHEDULE[(SCHEDULE["–î–µ–Ω—å"] == day_name) & (SCHEDULE["–¢–µ–≥"].isin(user_tags))]
    if df.empty:
        return f"üìÖ –ù–∞ {day_name} –ø–æ –≤–∞—à–∏–º –ø–æ–¥–ø–∏—Å–∫–∞–º –ø–∞—Ä –Ω–µ—Ç."

    lines = [f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day_name}:"]
    for _, r in df.iterrows():
        lines.append(f"‚è∞ {r['–í—Ä–µ–º—è']} ‚Äî {r['–ü—Ä–µ–¥–º–µ—Ç']} ({r['–¢–µ–≥']})\nüìç –ö–∞–±–∏–Ω–µ—Ç: {r['–ê—É–¥–∏—Ç–æ—Ä–∏—è']}")
    return "\n\n".join(lines)
def get_next_class(user_tags) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–ª–∏–∂–∞–π—à—É—é –∏–ª–∏ —Ç–µ–∫—É—â—É—é –ø–∞—Ä—É —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –¥–∞–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤."""
    now = datetime.now()
    today = normalize_day_name(now.strftime("%A"))

    df = SCHEDULE[(SCHEDULE["–î–µ–Ω—å"] == today) & (SCHEDULE["–¢–µ–≥"].isin(user_tags))].copy()
    if df.empty:
        return "üìÖ –°–µ–≥–æ–¥–Ω—è –ø–æ –≤–∞—à–∏–º –ø–æ–¥–ø–∏—Å–∫–∞–º –ø–∞—Ä –Ω–µ—Ç."

    candidates = []
    for _, r in df.iterrows():
        t = r["–í—Ä–µ–º—è"]
        if not t:
            continue
        start, end = t.split("-")[0].strip(), t.split("-")[1].strip()
        try:
            st = datetime.strptime(start, "%H:%M").replace(year=now.year, month=now.month, day=now.day)
            en = datetime.strptime(end, "%H:%M").replace(year=now.year, month=now.month, day=now.day)
        except Exception:
            continue

        if st <= now <= en:
            # –ü–∞—Ä–∞ –∏–¥—ë—Ç –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å
            return f"‚ñ∂ –°–µ–π—á–∞—Å –∏–¥—ë—Ç –ø–∞—Ä–∞:\n‚è∞ {r['–í—Ä–µ–º—è']} ‚Äî {r['–ü—Ä–µ–¥–º–µ—Ç']} ({r['–¢–µ–≥']})\nüìç –ö–∞–±–∏–Ω–µ—Ç: {r['–ê—É–¥–∏—Ç–æ—Ä–∏—è']}"
        elif st > now:
            candidates.append((st, r))

    if not candidates:
        return "‚úÖ –°–µ–≥–æ–¥–Ω—è –ø–∞—Ä—ã —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å."

    candidates.sort(key=lambda x: x[0])
    st, row = candidates[0]
    minutes = int((st - now).total_seconds() // 60)
    return f"‚è≠ –°–ª–µ–¥—É—é—â–∞—è –ø–∞—Ä–∞ —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω.\n\n‚è∞ {row['–í—Ä–µ–º—è']} ‚Äî {row['–ü—Ä–µ–¥–º–µ—Ç']} ({row['–¢–µ–≥']})\nüìç –ö–∞–±–∏–Ω–µ—Ç: {row['–ê—É–¥–∏—Ç–æ—Ä–∏—è']}"


# --- –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±–æ—Ç–∞ ---
def get_next_day_schedule(user_tags) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å –ø–æ —Ç–µ–≥–∞–º."""
    next_day = datetime.now() + timedelta(days=1)
    return get_day_schedule(user_tags, day=next_day.strftime("%A"))

def get_week_schedule(user_tags) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é (7 –¥–Ω–µ–π) –ø–æ —Ç–µ–≥–∞–º."""
    now = datetime.now()
    lines = []
    for i in range(7):
        day = now + timedelta(days=i)
        day_text = get_day_schedule(user_tags, day=day.strftime("%A"))
        lines.append(day_text)
    return "\n\n".join(lines)

# --- —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è /debug ---
def preview(n=10):
    return SCHEDULE.head(n).to_dict(orient="records")
