import asyncio
import re
import sqlite3
from aiogram import Bot, Dispatcher, Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, BotCommand
from aiogram.utils.keyboard import InlineKeyboardBuilder
import traceback


from schedule import get_day_schedule, get_next_class
from schedule import get_next_day_schedule, get_week_schedule

from datetime import datetime, timedelta
from zoneinfo import ZoneInfo

MOSCOW_TZ = ZoneInfo("Europe/Moscow")

API_TOKEN = ""

bot = Bot(token=API_TOKEN)
dp = Dispatcher()
router = Router()

# --- –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìö –ü–æ–¥–ø–∏—Å–∫–∏"), KeyboardButton(text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")],
        [KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
    ],
    resize_keyboard=True
)

# --- –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ---
conn = sqlite3.connect("subscriptions.db")
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS subscriptions (
    user_id INTEGER,
    hashtag TEXT
)
""")
conn.commit()

def add_subscription(user_id: int, hashtag: str):
    cursor.execute("INSERT INTO subscriptions (user_id, hashtag) VALUES (?, ?)", (user_id, hashtag))
    conn.commit()

def remove_subscription(user_id: int, hashtag: str):
    cursor.execute("DELETE FROM subscriptions WHERE user_id=? AND hashtag=?", (user_id, hashtag))
    conn.commit()

def remove_all_subscriptions(user_id: int):
    cursor.execute("DELETE FROM subscriptions WHERE user_id=?", (user_id,))
    conn.commit()

def get_subscriptions(user_id: int):
    cursor.execute("SELECT hashtag FROM subscriptions WHERE user_id=?", (user_id,))
    return [row[0] for row in cursor.fetchall()]

def get_users_by_hashtag(hashtag: str):
    cursor.execute("SELECT user_id FROM subscriptions WHERE hashtag=?", (hashtag,))
    return [row[0] for row in cursor.fetchall()]

# --- –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ö—ç—à—Ç–µ–≥–∏ ---
AVAILABLE_TAGS = {
    "–ù–æ–≤–æ—Å—Ç–∏ –∫—É—Ä—Å–∞": ["#–≤–∞–∂–Ω–æ","#–ª–µ–∫—Ü–∏—è", "#–Ω–æ–≤–æ—Å—Ç—å", "#—Ä–∞—Å—Å—ã–ª–∫–∞"],
    "–ú–∞—Å—Ç–µ—Ä—Å–∫–∏–µ": ["#—é–∑–µ—Ñ–æ–≤–∏—á", "#—Å–∏–¥–æ—Ä–æ–≤", "#–∞—Ä—É—Ç—é–Ω–æ–≤", "#—á–µ—Ä–µ–¥–Ω–∏—á–µ–Ω–∫–æ_–º–∞—Å—Ç–µ—Ä", "#–Ω–∞–≥–∏–º–æ–≤", "#—Ç–æ—Ä–æ–ø—Ü–µ–≤"],
    "–¢–µ–æ—Ä. –∏ –ø—Ä–∞–∫—Ç. —Å—Ç–∏–ª–∏—Å—Ç–∏–∫–∞": ["#–ø–∞–ø—è–Ω", "#—Ç–∫–∞—á–µ–Ω–∫–æ", "#—à–∏—Ç—å–∫–æ–≤–∞", "#–≥–æ–¥–µ–Ω–∫–æ"],
    "–ó–∞—Ä—É–±–µ–∂. –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞": ["#–ø–æ–ø–æ–≤", "#–º—É—Ä–∞—Ç–æ–≤–∞"],
    "–†—É—Å—Å–∫–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞": ["#–±–æ–ª—ã—á–µ–≤", "#–∫–æ–∂—É—Ö–∞—Ä–æ–≤", "#–∫–æ–ª—å—Ü–æ–≤–∞"],
    "–≠–π–∫–æ–Ω–æ–º–∏–∫—Å": ["#—Ü–∞—Ä—ë–≤–∞1", "#—Ü–∞—Ä—ë–≤–∞2"],
    "–°–æ–≤—Ä–µ–º–µ–Ω–∫–∞": ["#–¥—å—è—á–∫–æ–≤–∞", "#–±–æ–ª—ã—á–µ–≤–°–æ–≤—Ä", "#–∫–æ–∂—É—Ö–∞—Ä–æ–≤–°–æ–≤—Ä"],
    "–ò—Å—Ç–æ—Ä–∏—è –∫—Ä–∏—Ç–∏–∫–∏": ["#—á–µ—Ä–µ–¥–Ω–∏—á–µ–Ω–∫–æ"],
    "–ò—Å—Ç–æ—Ä–∏—è –∏—Å–∫—É—Å—Å—Ç–≤": ["#—é—Ä—á–∏–∫"],
    "–í–≤–µ–¥–µ–Ω–∏–µ –≤ –ª–∏—Ç. –ø—Ä–æ—Ü–µ—Å—Å": ["#—á—É–ø—Ä–∏–Ω–∏–Ω"],
    "–°–ø–µ—Ü–∫—É—Ä—Å": ["#—Å–∞–ª–µ–Ω–∫–æ", "#–µ—Å–∞—É–ª–æ–≤"],
    "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞ —Å—Ç—Ä–∞–Ω—ã –∏–∑—É—á–∞–µ–º–æ–≥–æ —è–∑—ã–∫–∞": ["#–∫–∞–∑–Ω–∏–Ω–∞", "#–ª–∞—Ç—Ñ—É–ª–ª–∏–Ω–∞", "#–ª–∏–ø–∫–∏–Ω", "#–ø–æ–ø–æ–≤_–ø–µ—Ä"],
    "–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫": ["#–≥–ª–∞–¥–∏–ª–∏–Ω", "#–ª–∞—Ç—Ñ—É–ª–ª–∏–Ω–∞", "#–ª–∏–ø–∫–∏–Ω"],
    "–°–ø–µ—Ü–∫—É—Ä—Å –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∏": ["#–≥–≤–æ–∑–¥–µ–≤–∞", "#–≥–æ—Ä–æ–¥–µ—Ü–∫–∏–π", "#–∞—Ä—Ç–∞–º–æ–Ω–æ–≤–∞", "#–∫–µ—à–æ–∫–æ–≤–∞", "#–º–æ–∂–∞–µ–≤–∞"],
}

# --- –∫–æ–º–∞–Ω–¥—ã ---
@router.message(Command("start"))
async def start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –õ–∏—Ç–∏–∫. –ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –Ω–∏–∂–µ üëá",
        reply_markup=main_menu
    )
# --- –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ---
@router.message(F.text == "üìö –ü–æ–¥–ø–∏—Å–∫–∏")
async def menu_tags(message: Message):
    await tags(message)


@router.message(F.text == "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def menu_schedule(message: Message):
    await schedule_cmd(message)


@router.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def menu_help(message: Message):
    await help_command(message)

@router.message(Command("tags"))
async def tags(message: Message):
    for category, tags in AVAILABLE_TAGS.items():
        kb = InlineKeyboardBuilder()
        for tag in tags:
            kb.add(InlineKeyboardButton(text=tag, callback_data=f"subscribe:{tag}"))
        kb.adjust(2)
        await message.answer(f"üìö <b>{category}</b>", parse_mode="HTML", reply_markup=kb.as_markup())

    kb_main = InlineKeyboardBuilder()
    kb_main.add(InlineKeyboardButton(text="üìå –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="show_mytags"))
    kb_main.add(InlineKeyboardButton(text="‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≤—Å–µ—Ö", callback_data="unsubscribe_all"))
    await message.answer("üîΩ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:", reply_markup=kb_main.as_markup())

@router.message(Command("schedule"))
async def schedule_cmd(message: Message):
    try:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:", reply_markup=schedule_keyboard())
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")

@router.callback_query(F.data.startswith("subscribe:"))
async def subscribe_button(callback: CallbackQuery):
    tag = callback.data.split(":")[1]
    user_id = callback.from_user.id
    current = get_subscriptions(user_id)
    if tag in current:
        remove_subscription(user_id, tag)
        await callback.answer(f"‚ùå –û—Ç–ø–∏—Å–∫–∞ –æ—Ç {tag}")
    else:
        add_subscription(user_id, tag)
        await callback.answer(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {tag}")

@router.callback_query(F.data == "show_mytags")
async def show_mytags(callback: CallbackQuery):
    tags = get_subscriptions(callback.from_user.id)
    text = "üìå –¢–≤–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n" + "\n".join(tags) if tags else "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫"
    await callback.message.answer(text)
    await callback.answer()

@router.callback_query(F.data == "unsubscribe_all")
async def unsubscribe_all_button(callback: CallbackQuery):
    remove_all_subscriptions(callback.from_user.id)
    await callback.message.answer("‚ùå –¢—ã –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç –≤—Å–µ—Ö —Ç–µ–≥–æ–≤")
    await callback.answer()

@router.message(Command("mytags"))
async def mytags_cmd(message: Message):
    tags = get_subscriptions(message.from_user.id)
    text = "üìå –¢–≤–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n" + "\n".join(tags) if tags else "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫"
    await message.answer(text)

@router.message(Command("day"))
async def send_day_schedule(message: Message):
    user_id = message.from_user.id
    try:
        user_tags = get_subscriptions(user_id)
        print(f"[DAY] user={user_id} tags={user_tags}")   # log –≤ –∫–æ–Ω—Å–æ–ª—å
    except Exception as e:
        traceback.print_exc()
        await message.answer("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –ø–æ–¥–ø–∏—Å–æ–∫. –°–º–æ—Ç—Ä–∏ –ª–æ–≥–∏.")
        return

    if not user_tags:
        await message.answer("‚ùó –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ /tags")
        return

    try:
        text = get_day_schedule(user_tags)
    except Exception as e:
        traceback.print_exc()
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –°–º–æ—Ç—Ä–∏ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞.")
        return

    if not text:
        await message.answer("–ü–æ –≤–∞—à–∏–º –ø–æ–¥–ø–∏—Å–∫–∞–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    await message.answer(text, parse_mode="Markdown")

# –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–µ–±–∞–≥–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–≤–∏–¥–Ω–æ —Ç–æ–ª—å–∫–æ —Ç–µ–±–µ)
@router.message(Command("debug"))
async def cmd_debug(message: Message):
    user_id = message.from_user.id
    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏ –∫–æ–ª–æ–Ω–∫–∏
    try:
        preview = preview  # —Ñ—É–Ω–∫—Ü–∏—è –≤ schedule.py
        from schedule import preview as schedule_preview
        head = schedule_preview(10)
        text = f"Preview (first rows):\n{head}"
    except Exception as e:
        import traceback; traceback.print_exc()
        text = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é: {e}"
    await message.answer(f"üîé Debug info:\nUser tags: {get_subscriptions(user_id)}\n\n{str(text)}")

@router.message(Command("next"))
async def send_next_class(message: Message):
    user_tags = get_subscriptions(message.from_user.id)
    if not user_tags:
        await message.answer("‚ùó –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ /tags")
        return
    text = get_next_class(user_tags)
    await message.answer(text, parse_mode="Markdown")
# --- –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≤—Å–µ—Ö —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É ---
@router.message(Command("unsubscribe_all"))
async def unsubscribe_all_cmd(message: Message):
    remove_all_subscriptions(message.from_user.id)
    await message.answer("‚ùå –¢—ã –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç –≤—Å–µ—Ö —Ç–µ–≥–æ–≤")

# --- –ø–æ–¥–ø–∏—Å–∫–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É ---
@router.message(Command("subscribe"))
async def subscribe_cmd(message: Message):
    parts = message.text.split()
    if len(parts) < 2:
        await message.answer("‚ùó –ò—Å–ø–æ–ª—å–∑—É–π: /subscribe #—Ç–µ–≥")
        return
    tag = parts[1]
    if not tag.startswith("#"):
        await message.answer("‚ùó –¢–µ–≥ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å #")
        return

    current = get_subscriptions(message.from_user.id)
    if tag in current:
        await message.answer(f"‚ö†Ô∏è –¢—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ {tag}")
    else:
        add_subscription(message.from_user.id, tag)
        await message.answer(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {tag} –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞")

# --- –æ—Ç–ø–∏—Å–∫–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É ---
@router.message(Command("unsubscribe"))
async def unsubscribe_cmd(message: Message):
    parts = message.text.split()
    if len(parts) < 2:
        await message.answer("‚ùó –ò—Å–ø–æ–ª—å–∑—É–π: /unsubscribe #—Ç–µ–≥")
        return
    tag = parts[1]

    current = get_subscriptions(message.from_user.id)
    if tag not in current:
        await message.answer(f"‚ö†Ô∏è –¢—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ {tag}")
    else:
        remove_subscription(message.from_user.id, tag)
        await message.answer(f"‚ùå –û—Ç–ø–∏—Å–∫–∞ –æ—Ç {tag} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")

@router.message(Command("nextday"))
async def nextday_cmd(message: Message):
    user_tags = get_subscriptions(message.from_user.id)
    if not user_tags:
        await message.answer("‚ùó –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ /tags")
        return
    text = get_next_day_schedule(user_tags)
    await message.answer(text, parse_mode="Markdown")

@router.message(Command("week"))
async def week_cmd(message: Message):
    user_tags = get_subscriptions(message.from_user.id)
    if not user_tags:
        await message.answer("‚ùó –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ /tags")
        return

    from datetime import datetime, timedelta
    now = datetime.now(MOSCOW_TZ)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –¥–Ω—è–º
    for i in range(7):
        day = now + timedelta(days=i)
        day_text = get_day_schedule(user_tags, day=day.strftime("%A"))
        await message.answer(day_text, parse_mode="Markdown")

# --- –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è ---
def schedule_keyboard():
    kb = InlineKeyboardBuilder()
    kb.row(
        InlineKeyboardButton(text="üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data="schedule_day"),
        InlineKeyboardButton(text="üìÖ –ó–∞–≤—Ç—Ä–∞", callback_data="schedule_nextday"),
    )
    kb.row(
        InlineKeyboardButton(text="üìÖ –ù–µ–¥–µ–ª—è", callback_data="schedule_week"),
    )
    return kb.as_markup()

# --- –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è ---
@router.callback_query(F.data.startswith("schedule_"))
async def schedule_buttons(callback: CallbackQuery):
    user_tags = get_subscriptions(callback.from_user.id)
    if not user_tags:
        await callback.message.answer("‚ùó –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ /tags")
        await callback.answer()
        return

    if callback.data == "schedule_day":
        text = get_day_schedule(user_tags)
        await callback.message.answer(text, parse_mode="Markdown")

    elif callback.data == "schedule_nextday":
        text = get_next_day_schedule(user_tags)
        await callback.message.answer(text, parse_mode="Markdown")

    elif callback.data == "schedule_week":
        text = get_week_schedule(user_tags)
        await callback.message.answer(text, parse_mode="Markdown")

    await callback.answer()
    
# --- –ø–æ–º–æ—â—å ---
@router.message(Command("help"))
async def help_command(message: Message):
    text = (
        "–ë–æ—Ç –ø—Ä–∏–∑–≤–∞–Ω –ø–æ–º–æ—á—å –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –æ —Ç–µ—Ö —Å–µ–º–∏–Ω–∞—Ä–∞—Ö/–ª–µ–∫—Ü–∏—è—Ö, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –Ω—É–∂–Ω—ã.\n\n–í—ã —Å–∞–º–∏ –≤—ã–±–∏—Ä–∞—Ç–µ –Ω–∞ —á—Ç–æ –ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å—Å—è, –∞ –±–æ—Ç –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ö—ç—à—Ç–µ–≥–æ–º –∏–∑ –æ–±—â–µ–∫—É—Ä—Å–æ–≤–æ–≥–æ —á–∞—Ç–∞.\n\n "
        "üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "/tags ‚Äì –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–æ–∫\n"
        "/mytags - –ø–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏ \n"
        "/unsubscribe_all ‚Äì –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è —Å—Ä–∞–∑—É –æ—Ç –≤—Å–µ—Ö, –∞ –ø–æ—á–µ–º—É –±—ã –∏ –Ω–µ—Ç?\n"
        "/subscribe ‚Äì –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è, –Ω–∞–ø—Ä–∏–º–µ—Ä /subscribe #–ø–∞–ø—è–Ω \n"
        "/unsubscribe ‚Äì –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è, –Ω–∞–ø—Ä–∏–º–µ—Ä /unsubscribe #–ø–∞–ø—è–Ω - –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é() \n"
        "/day ‚Äì —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å \n"
        "/next ‚Äì —É–∑–Ω–∞—Ç—å –∫–∞–∫–∞—è —Å–ª–µ–¥—É—é—â–∞—è –ø–∞—Ä–∞ \n"
        "/nextday ‚Äì —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å \n"
        "/week ‚Äì —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é\n\n"
        "–í–∞–∂–Ω–æ! –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å–µ—Ö —Å–≤–æ–∏—Ö —Å–µ–º–∏–Ω–∞—Ä—Å–∫–∏—Ö! –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –∏ –Ω–∞ —Ö—ç—à—Ç–µ–≥ #–ª–µ–∫—Ü–∏—è.\n"
        "–¢–æ –µ—Å—Ç—å –µ—Å–ª–∏ –≤—ã –≤ —Å–µ–º–∏–Ω–∞—Ä—Å–∫–æ–π –≥—Ä—É–ø–ø–µ —É –ì–æ–¥–µ–Ω–∫–æ, —Ç–æ –Ω–∞ –ü–∞–ø—è–Ω–∞ –ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–µ –Ω—É–∂–Ω–æ!\n"
        "–£ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–æ–≤ –ø–æ–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —Å–¥–µ–ª–∞–Ω–æ((\n"
        "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –∫–∞—Å–∞—Ç–µ–ª—å–Ω–æ –±–æ—Ç–∞, –ø–∏—à–∏—Ç–µ —Å—é–¥–∞ @Snikov"  
    )
    await message.answer(text)
# --- —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –≤ –º–µ–Ω—é Telegram ---    
async def set_commands(bot: Bot):
    commands = [
        BotCommand(command="start", description="–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
        BotCommand(command="help", description="–ü–æ–º–æ—â—å"),
        BotCommand(command="tags", description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏"),
        BotCommand(command="mytags", description="–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏"),
        BotCommand(command="day", description="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"),
        BotCommand(command="next", description="–°–ª–µ–¥—É—é—â–∞—è –ø–∞—Ä–∞"),
        BotCommand(command="nextday", description="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞"),
        BotCommand(command="week", description="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é"),
        BotCommand(command="schedule", description="–ú–µ–Ω—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"),
    ]
    await bot.set_my_commands(commands)

# --- –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –ø–æ—Å—Ç–æ–≤ ---
@router.message()
async def catch_posts(message: Message):
    hashtags = re.findall(r"#\w+", (message.text or message.caption or ""))
    if not hashtags:
        return
    sent_to = set()
    for tag in hashtags:
        for user_id in get_users_by_hashtag(tag):
            if user_id not in sent_to:
                try:
                    await bot.forward_message(user_id, message.chat.id, message.message_id)
                    sent_to.add(user_id)
                except:
                    pass

dp.include_router(router)

async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await set_commands(bot)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

